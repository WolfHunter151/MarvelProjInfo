{"version":3,"sources":["resources/img/mjolnir.png","components/randomChar/RandomChar.js","components/charList/CharList.js","components/charInfo/CharInfo.js","components/charSearchForm/CharSearchForm.js","components/errorBoundary/ErrorBoundary.js","resources/img/vision.png","components/pages/MainPage.js","components/errorMessage/error.gif","components/errorMessage/ErrorMessage.js","services/MarvelService.js","hooks/http.hook.js","components/skeleton/Skeleton.js","utils/setContent.js"],"names":["View","data","name","description","thumbnail","homepage","wiki","imgStyle","className","src","alt","style","href","RandomChar","useState","char","setChar","useMarvelService","getCharacter","clearError","process","setProcess","useEffect","updateChar","timerId","setInterval","clearInterval","onCharLoaded","id","Math","floor","random","then","setContent","onClick","mjolnir","CharList","props","charList","setCharList","newItemLoading","setnewItemLoading","offset","setOffset","charEnded","setCharEnded","getAllCharacters","onRequest","initial","onCharListLoaded","newCharList","ended","length","itemRefs","useRef","focusOnItem","current","forEach","item","classList","remove","add","focus","elements","useMemo","Component","Spinner","ErrorMessage","Error","arr","items","map","i","tabIndex","ref","el","onCharSelected","onKeyPress","e","key","renderItems","disabled","comics","CharInfo","charId","CharSearchForm","loading","error","getCharacterByName","errorMessage","results","to","initialValues","charName","validationSchema","Yup","required","onSubmit","htmlFor","type","placeholder","component","ErrorBoundary","state","errorInfo","console","log","this","setState","children","MainPage","selectedChar","Helmet","content","decoration","img","display","width","height","objectFit","margin","request","useCallback","url","method","body","headers","fetch","response","ok","status","json","useHttp","_apiBase","_apiKey","a","res","_transformCharacter","getAllComics","comicsOffset","_transformComicsInfo","getComic","slice","path","extension","urls","title","pages","pageCount","price","prices","language","textObjects","Skeleton"],"mappings":"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","file":"static/js/6.b2c256b9.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/mjolnir.61f31e18.png\";","import {useState, useEffect} from 'react';\nimport setContent from '../../utils/setContent';\nimport useMarvelService from '../../services/MarvelService';\n\nimport './randomChar.scss';\nimport mjolnir from '../../resources/img/mjolnir.png';\n\nconst RandomChar = () => {\n\n    const [char, setChar] = useState(null);\n\n    const {getCharacter, clearError, process, setProcess} = useMarvelService();\n\n    useEffect(() => {\n        updateChar();\n        const timerId = setInterval(updateChar, 60000);\n\n        return () => {\n            clearInterval(timerId)\n        }\n    }, [])\n\n    const onCharLoaded = (char) => {\n        setChar(char);\n    }\n\n    const updateChar = () => {\n        clearError();\n        const id = Math.floor(Math.random() * (1011400 - 1011000)) + 1011000;\n        getCharacter(id)\n            .then(onCharLoaded)\n            .then(() => setProcess('confirmed'));\n    }\n\n    return (\n        <div className=\"randomchar\">\n            {setContent(process, View, char)}\n            <div className=\"randomchar__static\">\n                <p className=\"randomchar__title\">\n                    Random character for today!<br/>\n                    Do you want to get to know him better?\n                </p>\n                <p className=\"randomchar__title\">\n                    Or choose another one\n                </p>\n                <button onClick={updateChar} className=\"button button__main\">\n                    <div className=\"inner\">try it</div>\n                </button>\n                <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\"/>\n            </div>\n        </div>\n    )\n}\n\nconst View = ({data}) => {\n    const {name, description, thumbnail, homepage, wiki} = data;\n    let imgStyle = {'objectFit' : 'cover'};\n    if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n        imgStyle = {'objectFit' : 'contain'};\n    }\n\n    return (\n        <div className=\"randomchar__block\">\n            <img src={thumbnail} alt=\"Random character\" className=\"randomchar__img\" style={imgStyle}/>\n            <div className=\"randomchar__info\">\n                <p className=\"randomchar__name\">{name}</p>\n                <p className=\"randomchar__descr\">\n                    {description}\n                </p>\n                <div className=\"randomchar__btns\">\n                    <a href={homepage} className=\"button button__main\">\n                        <div className=\"inner\">homepage</div>\n                    </a>\n                    <a href={wiki} className=\"button button__secondary\">\n                        <div className=\"inner\">Wiki</div>\n                    </a>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default RandomChar;","import {useState, useEffect, useRef, useMemo} from 'react';\nimport PropTypes from 'prop-types';\n\nimport useMarvelService from '../../services/MarvelService';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\n\nimport './charList.scss';\n\nconst setContent = (process, Component, newItemLoading) => {\n    switch(process) {\n        case 'waiting':\n            return <Spinner/>;\n        case 'loading':\n            return newItemLoading ? <Component/> : <Spinner/>\n        case 'confirmed':\n            return <Component/>;\n        case 'error':\n            return <ErrorMessage/>;\n        default:\n            throw new Error('Unexpected process state')\n    }\n}\n\nconst CharList = (props) => {\n\n    const [charList, setCharList] = useState([]);\n    const [newItemLoading, setnewItemLoading] = useState(false);\n    const [offset, setOffset] = useState(343);\n    const [charEnded, setCharEnded] = useState(false);\n\n    const {getAllCharacters, process, setProcess} = useMarvelService();\n\n    useEffect(() => {\n        onRequest(offset, true);\n    }, [])\n\n    const onRequest = (offset, initial) => {\n        initial ? setnewItemLoading(false) : setnewItemLoading(true);\n        getAllCharacters(offset)\n            .then(onCharListLoaded)\n            .then(() => setProcess('confirmed'));\n    }\n\n    const onCharListLoaded = (newCharList) => {\n        let ended = false;\n        if (newCharList.length < 9) {\n            ended = true;\n        }\n        setCharList([...charList, ...newCharList]);\n        setnewItemLoading(false);\n        setOffset(offset + 9);\n        setCharEnded(ended);\n    }\n\n    const itemRefs = useRef([]);\n\n    const focusOnItem = (id) => {\n        itemRefs.current.forEach(item => item.classList.remove('char__item_selected'));\n        itemRefs.current[id].classList.add('char__item_selected');\n        itemRefs.current[id].focus();\n    }\n\n    function renderItems (arr){\n        const items =  arr.map((item, i) => {\n            let imgStyle = {'objectFit' : 'cover'};\n            if (item.thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n                imgStyle = {'objectFit' : 'unset'};\n            }\n\n            return (\n                <li\n                    className=\"char__item\"\n                    tabIndex={0}\n                    ref={el => itemRefs.current[i] = el}\n                    onClick={() => {\n                        props.onCharSelected(item.id);\n                        focusOnItem(i);\n                    }}\n                    onKeyPress={(e) => {\n                        if (e.key === ' ' || e.key === \"Enter\") {\n                            props.onCharSelected(item.id);\n                            focusOnItem(i);\n                        }\n                    }}>\n                        <img src={item.thumbnail} alt={item.name} style={imgStyle}/>\n                        <div className=\"char__name\">{item.name}</div>\n                </li>\n            )\n        });\n\n        return (\n            <ul className=\"char__grid\">\n                {items}\n            </ul>\n        )\n    }\n\n    const elements = useMemo(() => {\n        return setContent(process, () => renderItems(charList), newItemLoading)\n    }, [process])\n\n    return (\n        <div className=\"char__list\">\n            {elements}\n            <button\n                disabled={newItemLoading}\n                style={{'display' : charEnded ? 'none' : 'block'}}\n                className=\"button button__main button__long\"\n                onClick={() => onRequest(offset)}>\n                <div className=\"inner\">load more</div>\n            </button>\n        </div>\n    )\n}\n\nCharList.propTypes = {\n    onCharSelected: PropTypes.func.isRequired\n}\n\nexport default CharList;\n","import { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\n\nimport useMarvelService from '../../services/MarvelService';\nimport setContent from '../../utils/setContent';\n\nimport './charInfo.scss';\n\nconst CharInfo = (props) => {\n\n    const [char, setChar] = useState(null);\n\n    const {getCharacter, clearError, process, setProcess } =  useMarvelService();\n\n    useEffect(() => {\n        updateChar()\n    }, [props.charId])\n\n    const updateChar = () => {\n        const {charId} = props;\n        if (!charId) {\n            return;\n        }\n        clearError();\n        getCharacter(charId)\n            .then(onCharLoaded)\n            .then(() => setProcess('confirmed'))\n    }\n\n    const onCharLoaded = (char) => {\n        setChar(char);\n    }\n\n    return (\n        <div className=\"char__info\">\n            {setContent(process, View, char)}\n        </div>\n    )\n}\n\nconst View = ({data}) => {\n    const {name, description, thumbnail, homepage, wiki, comics} = data;\n\n    let imgStyle = {'objectFit' : 'cover'};\n    if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n        imgStyle = {'objectFit' : 'contain'};\n    }\n\n    return (\n        <>\n            <div className=\"char__basics\">\n                <img src={thumbnail} alt={name} style={imgStyle}/>\n                <div>\n                    <div className=\"char__info-name\">{name}</div>\n                    <div className=\"char__btns\">\n                        <a href={homepage} className=\"button button__main\">\n                            <div className=\"inner\">homepage</div>\n                        </a>\n                        <a href={wiki} className=\"button button__secondary\">\n                            <div className=\"inner\">Wiki</div>\n                        </a>\n                    </div>\n                </div>\n            </div>\n            <div className=\"char__descr\">\n                {description}\n            </div>\n            <div className=\"char__comics\">Comics:</div>\n            <ul className=\"char__comics-list\">\n                {comics.length > 0 ? null : 'There is no comics with this character'}\n                {\n                    comics.map((item, i) => {\n                        // eslint-disable-next-line\n                        if (i > 9) return;\n                        return (\n                            <li key={i} className=\"char__comics-item\">\n                                {item.name}\n                            </li>\n                        )\n                    })\n                }                \n            </ul>\n        </>\n    )\n}\n\nCharInfo.propTypes = {\n    charId: PropTypes.number\n}\n\nexport default CharInfo;","import {useState} from 'react';\nimport { Formik, Form, Field, ErrorMessage as FormikErrorMessage } from 'formik';\nimport * as Yup from 'yup';\nimport {Link} from 'react-router-dom';\n\nimport useMarvelService from '../../services/MarvelService';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\n\nimport './charSearchForm.scss';\n\nconst CharSearchForm = () => {\n    const [char, setChar] = useState(null);\n    const {loading, error, getCharacterByName, clearError} = useMarvelService();\n\n    const onCharLoaded = (char) => {\n        setChar(char);\n    }\n\n    const updateChar = (name) => {\n        clearError();\n\n        getCharacterByName(name)\n            .then(onCharLoaded);\n    }\n\n    const errorMessage = error ? <div className=\"char__search-critical-error\"><ErrorMessage /></div> : null;\n    const results = !char ? null : char.length > 0 ?\n                    <div className=\"char__search-wrapper\">\n                        <div className=\"char__search-success\">There is! Visit {char[0].name} page?</div>\n                        <Link to={`/characters/${char[0].id}`} className=\"button button__secondary\">\n                            <div className=\"inner\">To page</div>\n                        </Link>\n                    </div> : \n                    <div className=\"char__search-error\">\n                        The character was not found. Check the name and try again\n                    </div>;\n\n    return (\n        <div className=\"char__search-form\">\n            <Formik\n                initialValues = {{\n                    charName: ''\n                }}\n                validationSchema = {Yup.object({\n                    charName: Yup.string().required('This field is required')\n                })}\n                onSubmit = { ({charName}) => {\n                    updateChar(charName);\n                }}\n            >\n                <Form>\n                    <label className=\"char__search-label\" htmlFor=\"charName\">Or find a character by name:</label>\n                    <div className=\"char__search-wrapper\">\n                        <Field \n                            id=\"charName\" \n                            name='charName' \n                            type='text' \n                            placeholder=\"Enter name\"/>\n                        <button \n                            type='submit' \n                            className=\"button button__main\"\n                            disabled={loading}>\n                            <div className=\"inner\">find</div>\n                        </button>\n                    </div>\n                    <FormikErrorMessage component=\"div\" className=\"char__search-error\" name=\"charName\" />\n                </Form>\n            </Formik>\n            {results}\n            {errorMessage}\n        </div>\n    )\n}\n\nexport default CharSearchForm;","import { Component } from \"react\";\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\n\nclass ErrorBoundary extends Component {\n    state = {\n        error: false\n    }\n\n    componentDidCatch(error, errorInfo) {\n        console.log(error, errorInfo)\n        this.setState({\n            error: true\n        })\n    }\n\n    render() {\n        if (this.state.error) {\n            return <ErrorMessage/>\n        }\n\n        return this.props.children;\n    }\n}\n\nexport default ErrorBoundary;","export default __webpack_public_path__ + \"static/media/vision.067d4ae1.png\";","import { useState } from \"react\";\nimport {Helmet} from 'react-helmet'\n\nimport RandomChar from \"../randomChar/RandomChar\";\nimport CharList from \"../charList/CharList\";\nimport CharInfo from \"../charInfo/CharInfo\";\nimport CharSearchForm from \"../charSearchForm/CharSearchForm\";\nimport ErrorBoundary from \"../errorBoundary/ErrorBoundary\";\n\nimport decoration from '../../resources/img/vision.png';\n\nconst MainPage = () => {\n\n    const [selectedChar, setChar] = useState(null);\n\n    const onCharSelected = (id) => {\n        setChar(id);\n    }\n\n    return (\n        <>\n            <Helmet>\n                <meta\n                    name=\"description\"\n                    content=\"Marvel information portal\"\n                />\n                <title>Marvel information portal</title>\n            </Helmet>\n            <ErrorBoundary>\n                <RandomChar/>\n            </ErrorBoundary>\n            <div className=\"char__content\">\n                <ErrorBoundary>\n                    <CharList onCharSelected={onCharSelected}/>\n                </ErrorBoundary>\n                <div className=\"char__rightside-wrapper\">\n                <ErrorBoundary>\n                    <CharInfo charId={selectedChar}/>\n                </ErrorBoundary>\n                <ErrorBoundary>\n                    <CharSearchForm/>\n                </ErrorBoundary>\n                </div>\n                <img className=\"bg-decoration\" src={decoration} alt=\"vision\"/>\n            </div>                       \n        </>\n    )\n}\n\nexport default MainPage;","export default __webpack_public_path__ + \"static/media/error.42292aa1.gif\";","import img from './error.gif';\n\nconst ErrorMessage = () => {\n    return (\n        <img src={img} style={{display: 'block', width: '250px', height: '250px', objectFit:'contain', margin: '0 auto'}} alt=\"Error\" />\n    )\n}\n\nexport default ErrorMessage;","import {useHttp} from '../hooks/http.hook';\n\nconst useMarvelService = () => {\n    const {request, clearError, process, setProcess} = useHttp();\n    const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\n    const _apiKey = 'apikey=b392e6dc73e1b9bea7c19d113a55c218';\n    const _baseOffset = 343;\n\n    const getAllCharacters = async (offset = _baseOffset) => {\n        const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\n        return res.data.results.map(_transformCharacter);\n    }\n\n    const getCharacter = async (id) => {\n        const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\n        return _transformCharacter(res.data.results[0]);\n    }\n\n    const getCharacterByName = async (name) => {\n        const res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\n        return res.data.results.map(_transformCharacter);\n    }\n\n    const getAllComics = async (comicsOffset = 0) => {\n        const res = await request(`${_apiBase}comics?limit=8&offset=${comicsOffset}&${_apiKey}`);\n        return res.data.results.map(_transformComicsInfo);\n    }\n\n    const getComic = async (id) => {\n        const res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\n        return _transformComicsInfo(res.data.results[0]);\n    }\n\n    const _transformCharacter = (char) => {\n        return {\n            id: char.id,\n            name: char.name,\n            description: char.description ? `${char.description.slice(0,210)}...` : 'There is no description for this character',\n            thumbnail: char.thumbnail.path + `.${char.thumbnail.extension}`,\n            homepage: char.urls[0].url,\n            wiki: char.urls[1].url,\n            comics: char.comics.items\n        }\n    }\n\n    const _transformComicsInfo = (comics) => {\n        return {\n            id: comics.id,\n            title: comics.title,\n            description: comics.description ? comics.description : 'There is no description',\n            pages: comics.pageCount + ' pages',\n            thumbnail: comics.thumbnail.path + `.${comics.thumbnail.extension}`,\n            homepage: comics.urls[0].url,\n            price: comics.prices[0].price ? comics.prices[0].price  + '$' : \"NOT AVAILABLE\",\n            language: comics.textObjects[0] ? comics.textObjects[0].language : \"No information\"\n        }\n    }\n\n    return {\n            process,\n            getAllCharacters,\n            getCharacter,\n            clearError,\n            getAllComics,\n            getComic,\n            getCharacterByName,\n            setProcess\n        }\n}\n\nexport default useMarvelService;\n","import {useState, useCallback} from 'react';\n\nexport const useHttp = () => {\n    const [process, setProcess] = useState('waiting');\n\n    const request = useCallback(async (url, method = 'GET', body = null, headers = {'Content-Type': 'application/json'}) => {\n        \n        setProcess('loading');\n\n        try {\n            const response = await fetch(url, {method, body, headers});\n\n            if(!response.ok) {\n                throw new Error(`Could not fetch ${url}, status: ${response.status}`);\n            }\n\n            const data = await response.json();\n\n            return data;\n        }\n        catch(e) {\n            setProcess('error');\n            throw e;\n        }\n\n    }, []);\n\n    const clearError = useCallback(() => {\n        setProcess('loading');\n    }, []);\n\n    return {request, clearError, process, setProcess}\n}","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import Spinner from '../components/spinner/Spinner';\nimport ErrorMessage from '../components/errorMessage/ErrorMessage';\nimport Skeleton from '../components/skeleton/Skeleton';\n\nconst setContent = (process, Component, data) => {\n    switch(process) {\n        case 'waiting': \n            return <Skeleton/>;\n        case 'loading': \n            return <Spinner/>\n        case 'confirmed':\n            return <Component data={data}/>;\n        case 'error': \n            return <ErrorMessage/>;\n        default:\n            throw new Error('Unexpected process state')\n    }\n}\n\nexport default setContent;"],"sourceRoot":""}